import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import TodoList from '../TodoList';
import { useTodos } from '@/hooks/useTodos';
import { Todo, TodoStats } from '@/lib/types';

// useTodos ÌõÖ Î™®ÌÇπ
jest.mock('@/hooks/useTodos');
const mockUseTodos = useTodos as jest.MockedFunction<typeof useTodos>;

// ÌÖåÏä§Ìä∏Ïö© ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
const mockTodos: Todo[] = [
  {
    id: '1',
    text: 'Ï≤´ Î≤àÏß∏ Ìï† Ïùº',
    completed: false,
    createdAt: '2024-01-01T10:00:00Z'
  },
  {
    id: '2',
    text: 'Îëê Î≤àÏß∏ Ìï† Ïùº',
    completed: true,
    createdAt: '2024-01-01T11:00:00Z'
  },
  {
    id: '3',
    text: 'ÏÑ∏ Î≤àÏß∏ Ìï† Ïùº',
    completed: false,
    createdAt: '2024-01-01T12:00:00Z'
  }
];

const mockTodoStats: TodoStats = {
  total: 3,
  active: 2,
  completed: 1,
  completionPercentage: 33
};

const defaultMockReturn = {
  todos: mockTodos,
  filter: 'all' as const,
  filteredTodos: mockTodos,
  todoStats: mockTodoStats,
  toggleTodo: jest.fn(),
  deleteTodo: jest.fn(),
  editTodo: jest.fn(),
  addTodo: jest.fn(),
  setFilter: jest.fn(),
  clearCompleted: jest.fn(),
  error: null,
  clearError: jest.fn(),
  isLoading: false
};

describe('TodoList Ïª¥Ìè¨ÎÑåÌä∏', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockUseTodos.mockReturnValue(defaultMockReturn);
  });

  describe('Î†åÎçîÎßÅ', () => {
    it('Ìï† Ïùº Î™©Î°ùÏùÑ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÌïúÎã§', () => {
      render(<TodoList />);
      
      expect(screen.getByText('Ï≤´ Î≤àÏß∏ Ìï† Ïùº')).toBeInTheDocument();
      expect(screen.getByText('Îëê Î≤àÏß∏ Ìï† Ïùº')).toBeInTheDocument();
      expect(screen.getByText('ÏÑ∏ Î≤àÏß∏ Ìï† Ïùº')).toBeInTheDocument();
    });

    it('ÌÜµÍ≥Ñ Ï†ïÎ≥¥Î•º Ï†ïÌôïÌûà ÌëúÏãúÌïúÎã§', () => {
      render(<TodoList />);
      
      // Î∂ÑÎ¶¨Îêú ÌÖçÏä§Ìä∏Î•º ÏúÑÌï¥ ÌÅ¥ÎûòÏä§ Í∏∞Î∞òÏúºÎ°ú ÏöîÏÜå Ï∞æÍ∏∞
      expect(screen.getByText('3')).toBeInTheDocument();
      expect(screen.getByText('Í∞úÏùò Ìï† Ïùº')).toBeInTheDocument();
      
      // Í∞úÎ≥Ñ ÌÜµÍ≥Ñ span ÏöîÏÜåÎì§ ÌôïÏù∏
      expect(screen.getByText(/Ï†ÑÏ≤¥:\s*3/)).toBeInTheDocument();
      expect(screen.getByText(/ÏßÑÌñâ Ï§ë:\s*2/)).toBeInTheDocument();
      expect(screen.getByText(/ÏôÑÎ£å:\s*1/)).toBeInTheDocument();
      expect(screen.getByText(/33\s*% ÏôÑÎ£å/)).toBeInTheDocument();
    });

    it('ÏßÑÌñâÎ•† Î∞îÎ•º ÌëúÏãúÌïúÎã§', () => {
      render(<TodoList />);
      
      const progressBar = document.querySelector('[style*="width: 33%"]');
      expect(progressBar).toBeInTheDocument();
    });

    it('Ìï† Ïùº Î™©Î°ùÏóê Ï†ÅÏ†àÌïú ARIA Î†àÏù¥Î∏îÏùÑ ÏÑ§Ï†ïÌïúÎã§', () => {
      render(<TodoList />);
      
      expect(screen.getByRole('list', { name: 'Ìï† Ïùº Î™©Î°ù' })).toBeInTheDocument();
    });
  });

  describe('Î°úÎî© ÏÉÅÌÉú', () => {
    it('Î°úÎî© Ï§ëÏùº Îïå Ïä§ÏºàÎ†àÌÜ§ÏùÑ ÌëúÏãúÌïúÎã§', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        isLoading: true
      });

      render(<TodoList />);
      
      expect(document.querySelector('.animate-pulse')).toBeInTheDocument();
    });
  });

  describe('ÏóêÎü¨ ÏÉÅÌÉú', () => {
    it('ÏóêÎü¨Í∞Ä ÏûàÏùÑ Îïå ÏóêÎü¨ Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§', () => {
      const errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        error: errorMessage
      });

      render(<TodoList />);
      
      expect(screen.getByText('Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§')).toBeInTheDocument();
      expect(screen.getByText(errorMessage)).toBeInTheDocument();
    });
  });

  describe('Îπà ÏÉÅÌÉú', () => {
    it('Ìï† ÏùºÏù¥ ÏóÜÏùÑ Îïå Îπà ÏÉÅÌÉú Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        todos: [],
        filteredTodos: [],
        todoStats: { total: 0, active: 0, completed: 0, completionPercentage: 0 }
      });

      render(<TodoList />);
      
      expect(screen.getByText('Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
      expect(screen.getByText('Ï≤´ Î≤àÏß∏ Ìï† ÏùºÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî!')).toBeInTheDocument();
    });

    it('ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Ï†ÅÏ†àÌïú Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§ - active', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        filter: 'active',
        filteredTodos: [],
        todoStats: { total: 2, active: 0, completed: 2, completionPercentage: 100 }
      });

      render(<TodoList />);
      
      expect(screen.getByText('ÏßÑÌñâ Ï§ëÏù∏ Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
      expect(screen.getByText('Î™®Îì† Ìï† ÏùºÏùÑ ÏôÑÎ£åÌñàÎÑ§Ïöî! üéâ')).toBeInTheDocument();
    });

    it('ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Ï†ÅÏ†àÌïú Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§ - completed', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        filter: 'completed',
        filteredTodos: [],
        todoStats: { total: 2, active: 2, completed: 0, completionPercentage: 0 }
      });

      render(<TodoList />);
      
      expect(screen.getByText('ÏôÑÎ£åÎêú Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
      expect(screen.getByText('Ìï† ÏùºÏùÑ ÏôÑÎ£åÌï¥Î≥¥ÏÑ∏Ïöî!')).toBeInTheDocument();
    });
  });

  describe('ÌïÑÌÑ∞ ÌëúÏãú', () => {
    it('active ÌïÑÌÑ∞Í∞Ä Ï†ÅÏö©ÎêòÏóàÏùÑ Îïå ÌïÑÌÑ∞ Î∞∞ÏßÄÎ•º ÌëúÏãúÌïúÎã§', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        filter: 'active',
        filteredTodos: mockTodos.filter(todo => !todo.completed)
      });

      render(<TodoList />);
      
      expect(screen.getByText('ÏßÑÌñâ Ï§ë')).toBeInTheDocument();
    });

    it('completed ÌïÑÌÑ∞Í∞Ä Ï†ÅÏö©ÎêòÏóàÏùÑ Îïå ÌïÑÌÑ∞ Î∞∞ÏßÄÎ•º ÌëúÏãúÌïúÎã§', () => {
      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        filter: 'completed',
        filteredTodos: mockTodos.filter(todo => todo.completed)
      });

      render(<TodoList />);
      
      expect(screen.getByText('ÏôÑÎ£åÎê®')).toBeInTheDocument();
    });
  });

  describe('ÎßéÏùÄ Ìï≠Î™© ÌëúÏãú', () => {
    it('10Í∞ú Ïù¥ÏÉÅÏùò Ìï≠Î™©Ïù¥ ÏûàÏùÑ Îïå ÌïÑÌÑ∞Îêú Í∞úÏàòÎ•º ÌëúÏãúÌïúÎã§', () => {
      const manyTodos = Array.from({ length: 15 }, (_, i) => ({
        id: String(i + 1),
        text: `Ìï† Ïùº ${i + 1}`,
        completed: false,
        createdAt: '2024-01-01T10:00:00Z'
      }));

      mockUseTodos.mockReturnValue({
        ...defaultMockReturn,
        todos: manyTodos,
        filteredTodos: manyTodos,
        todoStats: { total: 15, active: 15, completed: 0, completionPercentage: 0 }
      });

      render(<TodoList />);
      
      // ÌÜµÍ≥Ñ Ï†ïÎ≥¥Í∞Ä Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêòÎäîÏßÄ ÌôïÏù∏
      expect(screen.getByText('Í∞úÏùò Ìï† Ïùº')).toBeInTheDocument();
      expect(screen.getByText(/Ï†ÑÏ≤¥:\s*15/)).toBeInTheDocument();
      expect(screen.getByText(/ÏßÑÌñâ Ï§ë:\s*15/)).toBeInTheDocument();
      expect(screen.getByText(/ÏôÑÎ£å:\s*0/)).toBeInTheDocument();
      
      // Ìï† Ïùº Ìï≠Î™©Îì§Ïù¥ Ïã§Ï†úÎ°ú Î†åÎçîÎßÅÎêòÎäîÏßÄ ÌôïÏù∏ (Ï≤òÏùåÍ≥º ÎßàÏßÄÎßâ)
      expect(screen.getByText('Ìï† Ïùº 1')).toBeInTheDocument();
      expect(screen.getByText('Ìï† Ïùº 15')).toBeInTheDocument();
      
      // 15Í∞úÏùò Ìï† Ïùº Ìï≠Î™©Ïù¥ Î™®Îëê Î†åÎçîÎßÅÎêòÎäîÏßÄ ÌôïÏù∏
      const todoItems = screen.getAllByRole('listitem');
      expect(todoItems).toHaveLength(15);
    });
  });

  describe('Ïï†ÎãàÎ©îÏù¥ÏÖò', () => {
    it('Ìï† Ïùº Ìï≠Î™©Îì§Ïóê ÌéòÏù¥ÎìúÏù∏ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÅ¥ÎûòÏä§Í∞Ä Ï†ÅÏö©ÎêúÎã§', () => {
      render(<TodoList />);
      
      const animatedElements = document.querySelectorAll('.animate-fade-in');
      expect(animatedElements.length).toBeGreaterThan(0);
    });
  });

  describe('Ï†ëÍ∑ºÏÑ±', () => {
    it('Ìï† Ïùº Î™©Î°ùÏù¥ Ï†ÅÏ†àÌïú roleÍ≥º aria-labelÏùÑ Í∞ÄÏßÑÎã§', () => {
      render(<TodoList />);
      
      expect(screen.getByRole('list', { name: 'Ìï† Ïùº Î™©Î°ù' })).toBeInTheDocument();
    });
  });

  describe('Ïª§Ïä§ÌÖÄ className', () => {
    it('Ï†ÑÎã¨Îêú classNameÏùÑ Ï†ÅÏö©ÌïúÎã§', () => {
      const { container } = render(<TodoList className="custom-class" />);
      
      expect(container.firstChild).toHaveClass('custom-class');
    });
  });
}); 